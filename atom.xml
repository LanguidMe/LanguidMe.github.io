<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://languidme.github.io/</id>
    <title>Gridea</title>
    <updated>2019-08-02T10:27:55.053Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://languidme.github.io/"/>
    <link rel="self" href="https://languidme.github.io//atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://languidme.github.io//images/avatar.png</logo>
    <icon>https://languidme.github.io//favicon.ico</icon>
    <rights>All rights reserved 2019, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[netty源码分析流程(一)]]></title>
        <id>https://languidme.github.io//post/netty-yuan-ma-fen-xi-liu-cheng-yi</id>
        <link href="https://languidme.github.io//post/netty-yuan-ma-fen-xi-liu-cheng-yi">
        </link>
        <updated>2019-08-02T08:45:18.000Z</updated>
        <content type="html"><![CDATA[<h3 id="1环境">1.环境</h3>
<ul>
<li>此次项目分析都是基于Netty：<code>4.1.X</code>版本</li>
<li>首先在github进行fork一份到自己的仓库，如果访问github比较慢，可以使用<code>码云</code>copy到自己的码云仓库</li>
<li>环境搭建比较简单这里就不做演示了</li>
</ul>
<h3 id="2源码分析">2.源码分析</h3>
<p>​	首先打开官方的Demo(<strong>注意这里只分析流程,详细的类解析,后面会出</strong>)</p>
<p><img src="https://gitee.com/waitShe/images/raw/master/blog/1560842808589.png" alt="avatar"></p>
<ul>
<li>
<p>首先贴出来Server端的代码,这个大部分人基本都熟悉</p>
<pre><code class="language-java">public final class EchoServer {
    static final int PORT = Integer.parseInt(System.getProperty(&quot;port&quot;, &quot;8007&quot;));

    public static void main(String[] args) throws Exception {
        // 1
        EventLoopGroup bossGroup = new NioEventLoopGroup(1);
        EventLoopGroup workerGroup = new NioEventLoopGroup();
        final EchoServerHandler serverHandler = new EchoServerHandler();
        try {
            ServerBootstrap b = new ServerBootstrap();
            b.group(bossGroup, workerGroup)
                // 2
             .channel(NioServerSocketChannel.class)
             .option(ChannelOption.SO_BACKLOG, 100)
             .childHandler(new ChannelInitializer&lt;SocketChannel&gt;() {
                 @Override
                 public void initChannel(SocketChannel ch) throws Exception {
                     ChannelPipeline p = ch.pipeline();
                     p.addLast(serverHandler);
                 }
             });
            // 3
            ChannelFuture f = b.bind(PORT).sync();
            f.channel().closeFuture().sync();
        } finally {
            bossGroup.shutdownGracefully();
            workerGroup.shutdownGracefully();
        }
    }
}
</code></pre>
</li>
</ul>
<h4 id="第一步分析eventloopgroup-bossgroup-new-nioeventloopgroup1此对象的构建">第一步,分析<code>EventLoopGroup bossGroup = new NioEventLoopGroup(1);</code>此对象的构建</h4>
<p>首先看名知其意<code>NIO事件循环组</code>,既然是组那么后续肯定会有<code>NioEventLoop</code>这样类的数组,这里是bossGroup设置的线程数为1,所以大概猜测<code>NioEventLoopGroup</code>中应该有一个<code>NioEventLoop</code>数组并且数组大小等于1</p>
<ul>
<li>首先给个类图</li>
</ul>
<p><img src="https://gitee.com/waitShe/images/raw/master/blog/NioEventLoopGroup%E7%B1%BB%E5%9B%BE.png" alt=""></p>
<ul>
<li>个人建议还是先看一下<code>EventLoopGroup</code>和<code>EventExecutorGroup</code>顶级接口的方法,最起码能知道大致这些类干什么用的</li>
</ul>
<p><strong>至于workerGroup则使用默认的大小</strong>，下面贴出<code>NioEventLoopGroup</code>方法</p>
<pre><code class="language-java">public NioEventLoopGroup(int nThreads) {
    this(nThreads, (Executor) null);
}
public NioEventLoopGroup(int nThreads, Executor executor) {
    this(nThreads, executor, SelectorProvider.provider());
}
public NioEventLoopGroup(
            int nThreads, Executor executor, final SelectorProvider selectorProvider) {
    this(nThreads, executor, selectorProvider, DefaultSelectStrategyFactory.INSTANCE);
}
public NioEventLoopGroup(int nThreads, Executor executor, final SelectorProvider selectorProvider,
                             final SelectStrategyFactory selectStrategyFactory) {
    super(nThreads, executor, selectorProvider, selectStrategyFactory, RejectedExecutionHandlers.reject());
}
// 实现父类方法
@Override
protected EventLoop newChild(Executor executor, Object... args) throws Exception {
    return new NioEventLoop(this, executor, (SelectorProvider) args[0],
                            ((SelectStrategyFactory) args[1]).newSelectStrategy(), (RejectedExecutionHandler) args[2]);
}
</code></pre>
<ul>
<li>解析<code>MultithreadEventLoopGroup</code>类在流程中比较重要的方法</li>
</ul>
<pre><code class="language-java">// 构造方法 MultithreadEventLoopGroup
protected MultithreadEventLoopGroup(int nThreads, Executor executor, Object... args) {
    // DEFAULT_EVENT_LOOP_THREADS = Math.max(1, SystemPropertyUtil.getInt(&quot;io.netty.eventLoopThreads&quot;, NettyRuntime.availableProcessors() * 2));
    // 如果nThreads没有设置值,默认取值DEFAULT_EVENT_LOOP_THREADS:如果启动参数设置-Dio.netty.eventLoopThreads则取这个值，否则取可用处理器*2
    super(nThreads == 0 ? DEFAULT_EVENT_LOOP_THREADS : nThreads, executor, args);
}
@Override
protected ThreadFactory newDefaultThreadFactory() {
    return new DefaultThreadFactory(getClass(), Thread.MAX_PRIORITY);
}

@Override
public EventLoop next() {
    return (EventLoop) super.next();
}

@Override
protected abstract EventLoop newChild(Executor executor, Object... args) throws Exception;
	
</code></pre>
<pre><code>	* 在解析`MultithreadEventExecutorGroup`方法
</code></pre>
<pre><code class="language-java">// MultithreadEventExecutorGroup构造方法(这些参数肯定是要存放到父类中才合适)
protected MultithreadEventExecutorGroup(int nThreads, Executor executor, Object... args) {
    this(nThreads, executor, DefaultEventExecutorChooserFactory.INSTANCE, args);
}
protected MultithreadEventExecutorGroup(int nThreads, Executor executor,
                                            EventExecutorChooserFactory chooserFactory, Object... args) {
	if (executor == null) {
		// 如果executor等于null 则创建ThreadPerTaskExecutor对象,
		// ThreadPerTaskExecutor去执行DefaultThreadFactory创建出来的线程
		// 这里就体现出了工厂模式 DefaultThreadFactory 创建线程工厂
		executor = new ThreadPerTaskExecutor(newDefaultThreadFactory());
	}
	// 这里构建EventExecutor对象数组,这个对象的子类大致猜测一下,肯定会有上面提到的NioEventLoop
	// 所以这里也可以 当成 children = new NioEventLoop[nThreads];
	// bossGroup的nThreads 是1
	children = new EventExecutor[nThreads];
	for (int i = 0; i &lt; nThreads; i ++) {
		boolean success = false;
		try {
            // 这里就是调用了NioEventLoopGroup的实现方法创建了NioEventLoop对象
			children[i] = newChild(executor, args);
			success = true;
		} catch (Exception e) {
			throw new IllegalStateException(&quot;failed to create a child event loop&quot;, e);
		} finally {
			// 如果失败了则会执行关闭
			if (!success) {
				for (int j = 0; j &lt; i; j ++) {
					children[j].shutdownGracefully();
				}
				for (int j = 0; j &lt; i; j ++) {
					EventExecutor e = children[j];
					try {
						while (!e.isTerminated()) {
							e.awaitTermination(Integer.MAX_VALUE, TimeUnit.SECONDS);
						}
					} catch (InterruptedException interrupted) {
						Thread.currentThread().interrupt();
						break;
					}
				}
			}
		}
	}
	// 创建选择执行器,简单理解就是：new NioEventLoop[nThreads] 是个数组,按照什么规则获取下一个NioEventLoop去执行
	// 看下next方法就明白了
	chooser = chooserFactory.newChooser(children);
	final FutureListener&lt;Object&gt; terminationListener = new FutureListener&lt;Object&gt;() {
		@Override
		public void operationComplete(Future&lt;Object&gt; future) throws Exception {
			if (terminatedChildren.incrementAndGet() == children.length) {
				terminationFuture.setSuccess(null);
			}
		}
	};
	for (EventExecutor e: children) {
		// 设置children（SingleThreadEventLoop）的监听器-用于监听关闭线程执行器
		e.terminationFuture().addListener(terminationListener);
	}
	Set&lt;EventExecutor&gt; childrenSet = new LinkedHashSet&lt;EventExecutor&gt;(children.length);
	Collections.addAll(childrenSet, children);
	// 设置成不可修改的List
	readonlyChildren = Collections.unmodifiableSet(childrenSet);
}
// 使用选择器获取下一个执行器
@Override
public EventExecutor next() {
    return chooser.next();
}

@Override
public Iterator&lt;EventExecutor&gt; iterator() {
    return readonlyChildren.iterator();
}
// 此类别的方法就不介绍了,自己可以去看一看
</code></pre>
<h4 id="下面看server中的第二行标记代码channelnioserversocketchannelclass">下面看Server中的第二行标记代码<code>.channel(NioServerSocketChannel.class)</code></h4>
<pre><code class="language-java">public B channel(Class&lt;? extends C&gt; channelClass) {
	return channelFactory(new ReflectiveChannelFactory&lt;C&gt;(
			ObjectUtil.checkNotNull(channelClass, &quot;channelClass&quot;)
	));
}
// 注意:io.netty.channel.ChannelFactory是ChannelFactory的子类
public B channelFactory(io.netty.channel.ChannelFactory&lt;? extends C&gt; channelFactory) {
	return channelFactory((ChannelFactory&lt;C&gt;) channelFactory);
}
public B channelFactory(ChannelFactory&lt;? extends C&gt; channelFactory) {
	this.channelFactory = channelFactory;
	return self();
}
</code></pre>
<p>从代码中不难看出又是一个工厂类,<code>ReflectiveChannelFactory</code>给什么样的channel class会生成这个对象</p>
<pre><code class="language-java">// ReflectiveChannelFactory类代码
public class ReflectiveChannelFactory&lt;T extends Channel&gt; implements ChannelFactory&lt;T&gt; {
    private final Constructor&lt;? extends T&gt; constructor;
	
    public ReflectiveChannelFactory(Class&lt;? extends T&gt; clazz) {
        this.constructor = clazz.getConstructor();
    }

    @Override
    public T newChannel() {
        return constructor.newInstance();
    }
}
</code></pre>
<p>简化后的代码很简单,这里就不多说了，工厂就是方便了传入什么就生成什么,传入的nio那么channel是nio,netty主要用于nio，所以这里只说<code>NioServerSocketChannel</code></p>
<ul>
<li>
<p>工厂类没什么说的了,就要看一下<code>NioServerSocketChannel</code>类了吧,直接上代码吧</p>
<p>先只需要看对象的构造方法即可,别的方法有个记忆就行,走bind方法分析的时候会调用这些方法</p>
</li>
</ul>
<pre><code class="language-java">public class NioServerSocketChannel extends AbstractNioMessageChannel
                             implements io.netty.channel.socket.ServerSocketChannel {
	/**
	* 只保留了部分方法,其余方法可自行观看并了解
	* 此类还需要注意的是继承的AbstractNioMessageChannel,父类AbstractNioMessageChannel中有内部类NioMessageUnsafe
	* 用于对消息的处理,处理大致流程,就是把读写操作交给workerGroup去处理,NioMessageUnsafe会把channel封装成NioSocketChannel对象
	* 以便于wokerGroup去处理
	*/
    private static final ChannelMetadata METADATA = new ChannelMetadata(false, 16);
	// SelectorProvider.provider() 就不多说了,不知道的可以去看下NIO的demo知道这个干什么用的就行
	// 这里存储为全员变量 是因为SelectorProvider.provider()此方法里面有同步代码块.同步肯定会影响速度
    private static final SelectorProvider DEFAULT_SELECTOR_PROVIDER = SelectorProvider.provider();

    private static final InternalLogger logger = InternalLoggerFactory.getInstance(NioServerSocketChannel.class);

	// 打开一个Socket通道
    private static ServerSocketChannel newSocket(SelectorProvider provider) {
        return provider.openServerSocketChannel();
    }

    private final ServerSocketChannelConfig config;

    public NioServerSocketChannel() {
        this(newSocket(DEFAULT_SELECTOR_PROVIDER));
    }

    public NioServerSocketChannel(SelectorProvider provider) {
        this(newSocket(provider));
    }

    public NioServerSocketChannel(ServerSocketChannel channel) {
		// SelectionKey.OP_ACCEPT 这一行了解网上NIO Demo的肯定清楚
		// 这里就说明了bossGroup是只负责和客户端的连接
        super(null, channel, SelectionKey.OP_ACCEPT);
        config = new NioServerSocketChannelConfig(this, javaChannel().socket());
    }

    @Override
    protected void doBind(SocketAddress localAddress) throws Exception {
		// Java版本是否 &gt;= 7 应该是版本不同  bind方法的使用不同(本人渣渣,水平有限(*^▽^*))
        if (PlatformDependent.javaVersion() &gt;= 7) {
            javaChannel().bind(localAddress, config.getBacklog());
        } else {
            javaChannel().socket().bind(localAddress, config.getBacklog());
        }
    }
	
	// 此方法很重要,当Server连接好客户端后发生了读事件,就会调用此方法
    @Override
    protected int doReadMessages(List&lt;Object&gt; buf) throws Exception {
        SocketChannel ch = SocketUtils.accept(javaChannel());
        try {
            if (ch != null) {
                buf.add(new NioSocketChannel(this, ch));
                return 1;
            }
        } catch (Throwable t) {
        }
        return 0;
    }
}
</code></pre>
<h4 id="分析最重要的也是最难的一行代码channelfuture-f-bbindportsync">分析最重要的也是最难的一行代码<code>ChannelFuture f = b.bind(PORT).sync();</code></h4>
<ul>
<li>b 就是 <code>ServerBootStrap</code></li>
</ul>
<pre><code class="language-java">// 父类AbstractBootStrap
public ChannelFuture bind(int inetPort) {
	return bind(new InetSocketAddress(inetPort));
}
public ChannelFuture bind(SocketAddress localAddress) {
	return doBind(ObjectUtil.checkNotNull(localAddress, &quot;localAddress&quot;));
}

private ChannelFuture doBind(final SocketAddress localAddress) {
	// NO.1 初始化和注册channel
	final ChannelFuture regFuture = initAndRegister();
	final Channel channel = regFuture.channel();
	if (regFuture.cause() != null) {
		return regFuture;
	}
	if (regFuture.isDone()) {
		// 表示注册已经完成(这里的注册指的是channel注册到selector上)
		ChannelPromise promise = channel.newPromise();
		doBind0(regFuture, channel, localAddress, promise);
		return promise;
	} else {
		// 当没有完成时进行构建需要的参数
		final PendingRegistrationPromise promise = new PendingRegistrationPromise(channel);
		regFuture.addListener(new ChannelFutureListener() {
			@Override
			public void operationComplete(ChannelFuture future) throws Exception {
				Throwable cause = future.cause();
				if (cause != null) {
					// 注册失败的处理
					promise.setFailure(cause);
				} else {
					// 注册成功
					// See https://github.com/netty/netty/issues/2586
					promise.registered();
					// NO.2 注册成功后进行绑定
					doBind0(regFuture, channel, localAddress, promise);
				}
			}
		});
		return promise;
	}
}
</code></pre>
<h5 id="分析no1-final-channelfuture-regfuture-initandregister">分析NO.1 <code>final ChannelFuture regFuture = initAndRegister();</code></h5>
<ul>
<li>也是父类AbstractBootStrap</li>
</ul>
<pre><code class="language-java">final ChannelFuture initAndRegister() {
	// 方法给简化了
	Channel channel = null;
	// 调用工厂创建channel(也就是上面的NioServerSocketChannel),这里需要和上面联系起来
	channel = channelFactory.newChannel();
	// 初始化channel
	init(channel);
	// 注册channel到selector上
	ChannelFuture regFuture = config().group().register(channel);
	return regFuture;
}
</code></pre>
<ul>
<li>初始化init方法猜测一下肯定是个抽象方法所以实现在子类<code>ServerBootStrap</code></li>
</ul>
<pre><code class="language-java">// ServerBootStrap.init()
void init(Channel channel) throws Exception {
	final Map&lt;ChannelOption&lt;?&gt;, Object&gt; options = options0();
	synchronized (options) {
		setChannelOptions(channel, options, logger);
    }
	final Map&lt;AttributeKey&lt;?&gt;, Object&gt; attrs = attrs0();
	synchronized (attrs) {
		for (Entry&lt;AttributeKey&lt;?&gt;, Object&gt; e: attrs.entrySet()) {
			AttributeKey&lt;Object&gt; key = (AttributeKey&lt;Object&gt;) e.getKey();
			channel.attr(key).set(e.getValue());
		}
	}
	// 上面设置是设置一些参数,就不多说了

	ChannelPipeline p = channel.pipeline();
	
	// 下面的操作都是对childGroup也就是workerGroup进行的操作
	final EventLoopGroup currentChildGroup = childGroup;
	final ChannelHandler currentChildHandler = childHandler;
	final Entry&lt;ChannelOption&lt;?&gt;, Object&gt;[] currentChildOptions;
	final Entry&lt;AttributeKey&lt;?&gt;, Object&gt;[] currentChildAttrs;
	synchronized (childOptions) {
		currentChildOptions = childOptions.entrySet().toArray(newOptionArray(0));
	}
	synchronized (childAttrs) {
		currentChildAttrs = childAttrs.entrySet().toArray(newAttrArray(0));
	}
	
	// 给bossGroup添加处理链
	p.addLast(new ChannelInitializer&lt;Channel&gt;() {
		@Override
		public void initChannel(final Channel ch) throws Exception {
			final ChannelPipeline pipeline = ch.pipeline();
			ChannelHandler handler = config.handler();
			if (handler != null) {
				pipeline.addLast(handler);
			}
			// ch.eventLoop 是bossGroup的
			ch.eventLoop().execute(new Runnable() {
				@Override
				public void run() {
					// 这里给bossGroup添加一个处理链类,这里传的变量能看的出来基本都是Child,所以大胆猜测一下
					// ServerBootstrapAcceptor这个类就是用来处理wokerGroup的也就是说用于处理`读写`操作的
					// 前面也说了,bossGroup只用于处理和客户端的连接
                    // 更加准确点说,ServerBootstrapAcceptor这个类更像是一个委托类,委托给ServerBootstrapAcceptor此类进行对wokerGroup操作
					pipeline.addLast(new ServerBootstrapAcceptor(
							ch, currentChildGroup, currentChildHandler, currentChildOptions, currentChildAttrs));
				}
			});
		}
	});
}
</code></pre>
<ul>
<li>
<p>然后接着看<code>ChannelFuture regFuture = config().group().register(channel);</code>这行方法</p>
<ul>
<li>
<p><code>config().group()</code> 就是调用的bossGroup可以接着跟入</p>
<p>会进入到<code>SingleThreadEventLoop</code>类中,此类就是<code>NioEventLoop</code>的父类,如果想不起的可以看一下上面说过的newChild方法</p>
<pre><code class="language-java">// SingleThreadEventLoop
public ChannelFuture register(Channel channel) {
	// DefaultChannelPromise 此类可以理解成一个回调类,当执行成功某些操作后,会回调此类的某个函数(方法)
	// 其实有点像js的回调函数一样 ps：本人自己的理解,如有错误,请指出多谢
	return register(new DefaultChannelPromise(channel, this));
}

public ChannelFuture register(final ChannelPromise promise) {
	// promise.channel() 就是NioServerSocketChannel
	// unsafe()就是Unsafe类,只不过是其实现类 
	// register方法调用的是顶级抽象类AbstractUnsafe(实现了Unsafe)
	// 这里的this就是bossGroup
	promise.channel().unsafe().register(this, promise);
	return promise;
}
</code></pre>
<pre><code class="language-java">// AbstractChannel.AbstractUnsafe
public final void register(EventLoop eventLoop, final ChannelPromise promise) {
    // 获取bossGroup
    AbstractChannel.this.eventLoop = eventLoop;
    // eventLoop.inEventLoop()表示启动线程与当前线程相同，相同表示已经启动，不同则有两种可能：未启动或者线程不同
    if (eventLoop.inEventLoop()) {
        // 如果是同一线程 则调用注册方法
        register0(promise);
    } else {
        try {
            // 如果不是同一线程,则把注册方法执行包装成任务添加到队列中
            eventLoop.execute(new Runnable() {
                @Override
                public void run() {
                    register0(promise);
                }
            });
        } catch (Throwable t) {
            closeForcibly();
            closeFuture.setClosed();
            safeSetFailure(promise, t);
        }
    }
}

private void register0(ChannelPromise promise) {
	try {
		// 判断channel是否处于打开状态
		if (!promise.setUncancellable() || !ensureOpen(promise)) {
			return;
		}
		// 是否首次注册
		boolean firstRegistration = neverRegistered;
		// ps 此方法很重要,nio channel注册
		doRegister();
		// 是否首次注册设置为false
		neverRegistered = false;
		// 已注册设置为true
		registered = true;

		// 开始调用handlerAdded方法链
		pipeline.invokeHandlerAddedIfNeeded();
		
		// 设置为成功
		safeSetSuccess(promise);
		// 调用channelRegistered方法链 ps:如果想启动Server就进行调用 则把此handler加入到ServerBootstrap.handler
		// 如果是等待客户端注册后调用 则添加到ServerBootstrap.childHandler即可
		pipeline.fireChannelRegistered();
		// 判断通道channel是否打开
		if (isActive()) {
			if (firstRegistration) {
				// 如果通道channel已经打开&amp;是首次注册
				// 调用channelActive方法链
				pipeline.fireChannelActive();
			} else if (config().isAutoRead()) {
				// 此频道以前已注册，并且已设置isAutoRead。这意味着我们需要重新开始读取，以便处理入站数据。（翻译）
				// See https://github.com/netty/netty/issues/4805
				// 把事件设置为read
				beginRead();
			}
		}
	} catch (Throwable t) {
		// Close the channel directly to avoid FD leak.
		closeForcibly();
		closeFuture.setClosed();
		safeSetFailure(promise, t);
	}
}
</code></pre>
<p>注册环节就说到这里,关于<code>doRegister()</code>,<code>pipeline.invokeHandlerAddedIfNeeded()</code>,<code>pipeline.fireChannelRegistered()</code>，<code>pipeline.fireChannelActive()</code>方法可以自行看一下,和spring中的拦截器执行有点相似,注册方法看过nio就能一眼看明白</p>
</li>
</ul>
</li>
</ul>
<h5 id="分析no2dobind0regfuture-channel-localaddress-promise">分析NO.2<code>doBind0(regFuture, channel, localAddress, promise);</code></h5>
<pre><code class="language-java">private static void doBind0(
            final ChannelFuture regFuture, final Channel channel,
            final SocketAddress localAddress, final ChannelPromise promise) {
	// 此方法的调用会在channelRegistered方法之前,但肯定会在真正的channel注册到selector方法之后
	// 也就是说bind方法执行链是这样的:channel.register(selector) --&gt; 
	// 								  bind()也就是下面的channel.bind --&gt; 
	// 								  handler.channelRegistered() 也就是开始了执行链
    // 理想状态是这样的执行链,如果执行时不是同一线程,则执行流程不是上面的情况
	// 关于channel.register(selector) 可以在initAndRegister()方法的ChannelFuture regFuture = config().group().register(channel);
	// 这行代码一直跟下去就会出现大家熟悉的nio注册了
	channel.eventLoop().execute(new Runnable() {
		@Override
		public void run() {
			if (regFuture.isSuccess()) {
				channel.bind(localAddress, promise).addListener(ChannelFutureListener.CLOSE_ON_FAILURE);
			} else {
				promise.setFailure(regFuture.cause());
			}
		}
	});
}
</code></pre>
<p><code>channel.bind(localAddress, promise)</code>具体的执行方法也是在<code>AbstractChannel.AbstractUnsafe</code>中的,具体的流程,跟着debug就可以了解到,这里就不写了</p>
<pre><code class="language-java">// AbstractChannel.AbstractUnsafe
public final void bind(final SocketAddress localAddress, final ChannelPromise promise) {
	// 我自己的理解：绑定前的状态
	boolean wasActive = isActive();
	try {
		doBind(localAddress);
	} catch (Throwable t) {
		safeSetFailure(promise, t);
		closeIfClosed();
		return;
	}
	// isActive 绑定后的状态
	if (!wasActive &amp;&amp; isActive()) {
		// 如果channel已经Open了那么就进行事件传播channelActive
		invokeLater(new Runnable() {
			@Override
			public void run() {
				pipeline.fireChannelActive();
			}
		});
	}
	// 设置回调方法为成功
	safeSetSuccess(promise);
}
</code></pre>
<p><code>doBind(localAddress)</code>是一个抽象方法由子类去实现。此方法是channel的,所以实现就是<code>NioServerSocketChannel</code>此类</p>
<pre><code class="language-java">protected void doBind(SocketAddress localAddress) throws Exception {
	// 判断当前的jdk版本是否 &gt;= 7  版本不同  绑定方式发生了变化
	if (PlatformDependent.javaVersion() &gt;= 7) {
		javaChannel().bind(localAddress, config.getBacklog());
	} else {
		javaChannel().socket().bind(localAddress, config.getBacklog());
	}
}
</code></pre>
<h6 id="关于server的准备阶段流程已经分析完毕下一章会分析运行阶段的各个事件的处理">关于Server的准备阶段流程已经分析完毕.下一章会分析运行阶段的各个事件的处理</h6>
<h6 id="本人渣渣一枚对netty的了解不是太多这里只是根据nio-example把自己对netty的理解给写一下如果有错望指出不胜感激">本人渣渣一枚.对netty的了解不是太多,这里只是根据NIO example把自己对netty的理解给写一下,如果有错望指出,不胜感激</h6>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://languidme.github.io//post/hello-gridea</id>
        <link href="https://languidme.github.io//post/hello-gridea">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="http://hvenotes.fehey.com/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>𝖶𝗂𝗇𝖽𝗈𝗐𝗌</strong> 或 <strong>𝖬𝖺𝖼𝖮𝖲</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>